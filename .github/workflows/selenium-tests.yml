name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}-v2
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Node.js dependencies
        run: npm install

      - name: Prepare artifacts
        run: |
          tar -czvf www-build.tar.gz ./package.json ./src ./test
          ls -l

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: www-build
          path: www-build.tar.gz

  test:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: node:20
      ports:
        - 3000:3000
      options: --network-alias=testserver

    env:
      TEST_BASE_URL: http://testserver:3000
      SELENIUM_HOST: http://selenium:4444/wd/hub

    services:
      selenium:
        image: selenium/standalone-chrome
        ports:
          - 4444:4444

    steps:
      - name: Download built files
        uses: actions/download-artifact@v4
        with:
          name: www-build
          path: .

      - name: Extract artifacts
        run: |
          tar -xzvf www-build.tar.gz
          ls -l

      - name: Install dependencies (inside container)
        run: npm install

      - name: Run unit tests
        run: npm test

      - name: Start Node.js server
        run: |
          nohup node src/server.js &
          sleep 10

      - name: Verify server is running
        run: |
          for i in {1..20}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "Server is up and running!"
              break
            else
              echo "Server not ready (Status: $STATUS_CODE), retrying in 2 seconds..."
              sleep 2
            fi
            if [ "$i" -eq 20 ]; then
              echo "Server did not become ready after 40 seconds."
              exit 1
            fi
          done

      - name: Wait for Selenium server to be up
        run: |
          echo "Waiting for Selenium Hub to be available on $SELENIUM_HOST/status"
          for i in {1..20}; do
            curl -s "$SELENIUM_HOST/status" | grep -q '"ready": true' && break || sleep 3
          done
          curl -s "$SELENIUM_HOST/status" | grep '"ready": true' || { echo "Selenium Hub not ready!"; exit 1; }
          echo "Selenium Hub is ready!"

      - name: Run Selenium tests
        run: node test/SeleniumTest.mjs github

      - name: Cleanup (optional, depends on your needs)
        if: always()
        run: |
          echo "Tests finished. Stopping background processes."
          pkill -f "node src/server.js" || true

  security-scan:
    name: ESLint Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint Scan
        run: npm run lint || true

      # FIX: Add a step to check if the SARIF file exists before trying to upload it.
      - name: Check for SARIF file existence
        id: check_sarif
        run: |
          if [ -f "eslint-results.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
          else
            echo "SARIF file not found. Skipping upload."
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload SARIF file
        # This step will only run if the previous step set sarif_exists to 'true'
        if: steps.check_sarif.outputs.sarif_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
