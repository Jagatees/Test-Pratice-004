name: Node.js Selenium Testing

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # <-- Recommend v4 for latest features/bug fixes

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          # Changed 'v1' to 'v2' to force cache clear/rebuild.
          # You can change this to 'v3', 'v4' etc. if you need to clear it again.
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}-v2 # <-- Bumped cache version
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Node.js dependencies
        run: npm install

      - name: Prepare artifacts
        run: |
          # --- MODIFIED LINE HERE ---
          # Include the common passwords file and the entire src directory
          tar -czvf www-build.tar.gz ./package.json ./src ./test 
          ls -l

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: www-build
          path: www-build.tar.gz

  test:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: node:20
      ports:
        - 3000:3000
      options: --network-alias=testserver

    env:
      TEST_BASE_URL: http://testserver:3000
      SELENIUM_HOST: http://selenium:4444/wd/hub

    services:
      selenium:
        image: selenium/standalone-chrome
        ports:
          - 4444:4444

    steps:
      - name: Download built files
        uses: actions/download-artifact@v4
        with:
          name: www-build
          path: .

      - name: Extract artifacts
        run: |
          tar -xzvf www-build.tar.gz
          ls -l # To verify extraction at root level

      - name: Install dependencies (inside container)
        # Note: npm install here might be redundant if node_modules were packaged,
        # but if you only package source, then this is needed for the container.
        run: npm install

      # --- Keep these debug steps temporarily ---
      - name: List files for debugging (container root)
        run: |
          echo "Current directory in container:"
          pwd
          echo "Files in the current directory (container root):"
          ls -ltra .
      
      - name: List files in src directory (container)
        run: |
          echo "Files in src directory (container):"
          ls -ltra src/
      
      - name: List files in test directory (container)
        run: |
          echo "Files in test directory (container):"
          ls -ltra test/
      # --- End debug steps ---

      - name: Run unit tests
        # Assuming tests/test.js is your unit test file and it doesn't need the server
        run: npm test

      - name: Start Node.js server
        run: |
          nohup node src/server.js &  # Start the server in the background
          # Give the server more time to start, especially if loading the password file is large
          sleep 10 # Increased sleep to 10 seconds for robustness

      - name: Verify server is running
        # Using curl to check server endpoint for actual content, not just connection
        run: |
          for i in {1..20}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
            if [ "$STATUS_CODE" -eq 200 ]; then
              echo "Server is up and running!"
              break
            else
              echo "Server not ready (Status: $STATUS_CODE), retrying in 2 seconds..."
              sleep 2
            fi
            if [ "$i" -eq 20 ]; then
              echo "Server did not become ready after 40 seconds."
              exit 1
            fi
          done

      - name: Wait for Selenium server to be up
        # Add a proper health check for Selenium Hub
        run: |
          echo "Waiting for Selenium Hub to be available on $SELENIUM_HOST/status"
          for i in {1..20}; do
            curl -s "$SELENIUM_HOST/status" | grep -q '"ready": true' && break || sleep 3
          done
          curl -s "$SELENIUM_HOST/status" | grep '"ready": true' || { echo "Selenium Hub not ready!"; exit 1; }
          echo "Selenium Hub is ready!"

      - name: Run Selenium tests
        run: node test/SeleniumTest.mjs github

      - name: Cleanup (optional, depends on your needs)
        if: always()
        run: |
          echo "Tests finished. Stopping background processes."
          # If nohup created a process that doesn't exit, find and kill it
          pkill -f "node src/server.js" || true